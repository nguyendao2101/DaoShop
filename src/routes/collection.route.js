// src/routes/collection.route.js
const express = require('express');
const router = express.Router();
const CollectionController = require('../controllers/collection.controller');

console.log('üöÄ Collection routes loaded'); // Debug log

/**
 * @swagger
 * tags:
 *   name: Collections
 *   description: API qu·∫£n l√Ω b·ªô s∆∞u t·∫≠p s·∫£n ph·∫©m
 */

/**
 * @swagger
 * /api/collections/debug/info:
 *   get:
 *     summary: Debug - Th√¥ng tin collections trong database
 *     tags: [Collections]
 *     responses:
 *       200:
 *         description: Th√¥ng tin debug v·ªÅ collections
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 debug:
 *                   type: object
 *                   properties:
 *                     totalCount:
 *                       type: number
 *                       example: 1
 *                     activeCount:
 *                       type: number
 *                       example: 1
 *                     inactiveCount:
 *                       type: number
 *                       example: 0
 *                     sampleCollections:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/Collection'
 */

/**
 * @swagger
 * /api/collections/popular:
 *   get:
 *     summary: L·∫•y danh s√°ch b·ªô s∆∞u t·∫≠p ph·ªï bi·∫øn
 *     tags: [Collections]
 *     parameters:
 *       - in: query
 *         name: limit
 *         schema:
 *           type: number
 *           minimum: 1
 *           maximum: 50
 *         description: S·ªë l∆∞·ª£ng b·ªô s∆∞u t·∫≠p
 *         example: 10
 *     responses:
 *       200:
 *         description: Danh s√°ch b·ªô s∆∞u t·∫≠p ph·ªï bi·∫øn
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Collection'
 *       500:
 *         description: L·ªói server
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */

/**
 * @swagger
 * /api/collections:
 *   get:
 *     summary: L·∫•y danh s√°ch b·ªô s∆∞u t·∫≠p
 *     tags: [Collections]
 *     parameters:
 *       - in: query
 *         name: keyword
 *         schema:
 *           type: string
 *         description: T·ª´ kh√≥a t√¨m ki·∫øm theo t√™n
 *         example: Ch√≥t m√™
 *       - in: query
 *         name: isActive
 *         schema:
 *           type: boolean
 *         description: L·ªçc theo tr·∫°ng th√°i ho·∫°t ƒë·ªông
 *         example: true
 *       - in: query
 *         name: sortBy
 *         schema:
 *           type: string
 *           enum: [displayOrder, name, createdAt, totalProducts]
 *         description: S·∫Øp x·∫øp theo tr∆∞·ªùng
 *         example: displayOrder
 *       - in: query
 *         name: sortOrder
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *         description: Th·ª© t·ª± s·∫Øp x·∫øp
 *         example: asc
 *       - in: query
 *         name: page
 *         schema:
 *           type: number
 *           minimum: 1
 *         description: S·ªë trang
 *         example: 1
 *       - in: query
 *         name: limit
 *         schema:
 *           type: number
 *           minimum: 1
 *           maximum: 100
 *         description: S·ªë b·ªô s∆∞u t·∫≠p m·ªói trang
 *         example: 10
 *     responses:
 *       200:
 *         description: Danh s√°ch b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/CollectionsResponse'
 *       500:
 *         description: L·ªói server
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *   post:
 *     summary: T·∫°o b·ªô s∆∞u t·∫≠p m·ªõi (Admin)
 *     tags: [Collections]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CreateCollectionRequest'
 *     responses:
 *       201:
 *         description: T·∫°o b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: T·∫°o b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *                 data:
 *                   $ref: '#/components/schemas/Collection'
 *       400:
 *         description: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªô s∆∞u t·∫≠p ƒë√£ t·ªìn t·∫°i
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */

/**
 * @swagger
 * /api/collections/{id}:
 *   get:
 *     summary: L·∫•y th√¥ng tin chi ti·∫øt b·ªô s∆∞u t·∫≠p
 *     tags: [Collections]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID b·ªô s∆∞u t·∫≠p
 *         example: Ch√≥t M√™
 *     responses:
 *       200:
 *         description: Th√¥ng tin b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/CollectionResponse'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *   put:
 *     summary: C·∫≠p nh·∫≠t th√¥ng tin b·ªô s∆∞u t·∫≠p (Admin)
 *     tags: [Collections]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID b·ªô s∆∞u t·∫≠p
 *         example: Ch√≥t M√™
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UpdateCollectionRequest'
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: C·∫≠p nh·∫≠t b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *                 data:
 *                   $ref: '#/components/schemas/Collection'
 *       400:
 *         description: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *   delete:
 *     summary: X√≥a b·ªô s∆∞u t·∫≠p (Admin)
 *     tags: [Collections]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID b·ªô s∆∞u t·∫≠p
 *         example: Ch√≥t M√™
 *     responses:
 *       200:
 *         description: X√≥a b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: X√≥a b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *       400:
 *         description: B·ªô s∆∞u t·∫≠p kh√¥ng t·ªìn t·∫°i
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */

/**
 * @swagger
 * /api/collections/{id}/products:
 *   get:
 *     summary: L·∫•y danh s√°ch s·∫£n ph·∫©m trong b·ªô s∆∞u t·∫≠p
 *     tags: [Collections]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID b·ªô s∆∞u t·∫≠p
 *         example: Ch√≥t M√™
 *       - in: query
 *         name: page
 *         schema:
 *           type: number
 *           minimum: 1
 *         description: S·ªë trang
 *         example: 1
 *       - in: query
 *         name: limit
 *         schema:
 *           type: number
 *           minimum: 1
 *           maximum: 100
 *         description: S·ªë s·∫£n ph·∫©m m·ªói trang
 *         example: 10
 *     responses:
 *       200:
 *         description: Danh s√°ch s·∫£n ph·∫©m trong b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/CollectionProductsResponse'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *   post:
 *     summary: Th√™m s·∫£n ph·∫©m v√†o b·ªô s∆∞u t·∫≠p (Admin)
 *     tags: [Collections]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID b·ªô s∆∞u t·∫≠p
 *         example: Ch√≥t M√™
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/AddProductRequest'
 *     responses:
 *       200:
 *         description: Th√™m s·∫£n ph·∫©m v√†o b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Th√™m s·∫£n ph·∫©m v√†o b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *                 data:
 *                   $ref: '#/components/schemas/Collection'
 *       400:
 *         description: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c s·∫£n ph·∫©m ƒë√£ c√≥ trong b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b·ªô s∆∞u t·∫≠p ho·∫∑c s·∫£n ph·∫©m
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */

/**
 * @swagger
 * /api/collections/{id}/products/{productId}:
 *   delete:
 *     summary: X√≥a s·∫£n ph·∫©m kh·ªèi b·ªô s∆∞u t·∫≠p (Admin)
 *     tags: [Collections]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID b·ªô s∆∞u t·∫≠p
 *         example: Ch√≥t M√™
 *       - in: path
 *         name: productId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID s·∫£n ph·∫©m
 *         example: BT1
 *     responses:
 *       200:
 *         description: X√≥a s·∫£n ph·∫©m kh·ªèi b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: X√≥a s·∫£n ph·∫©m kh·ªèi b·ªô s∆∞u t·∫≠p th√†nh c√¥ng
 *                 data:
 *                   $ref: '#/components/schemas/Collection'
 *       400:
 *         description: S·∫£n ph·∫©m kh√¥ng c√≥ trong b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b·ªô s∆∞u t·∫≠p
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */

// Debug route - ƒë·∫∑t ·ªü ƒë·∫ßu ƒë·ªÉ tr√°nh conflict v·ªõi /:id
router.get('/debug/info', CollectionController.debugCollections);

// Routes ph·ªï bi·∫øn - ƒë·∫∑t tr∆∞·ªõc /:id ƒë·ªÉ tr√°nh conflict
router.get('/popular', CollectionController.getPopularCollections);

// Routes ch√≠nh
router.get('/', CollectionController.getAllCollections);
router.get('/:id', CollectionController.getCollectionById);
router.get('/:id/products', CollectionController.getProductsInCollection);

// Admin routes
router.post('/', CollectionController.createCollection);
router.put('/:id', CollectionController.updateCollection);
router.delete('/:id', CollectionController.deleteCollection);
router.post('/:id/products', CollectionController.addProductToCollection);
router.delete('/:id/products/:productId', CollectionController.removeProductFromCollection);

console.log('‚úÖ Collection routes configured with full Swagger documentation');

module.exports = router;